<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- 自动扫描与装配bean spring可以自动去扫描base-pack下面或者子包下面的Java文件，
	          如果扫描到有@Component @Repository @Controller @Service等这些注解的类，则把这些类注册为bean
	     @Service用于标注业务层组件;
         @Controller用于标注控制层组件（如struts中的action）;
         @Repository用于标注数据访问组件，即DAO组件;
         @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注;
         @Resource用于对象注入，代替setter方法注入，是java原生注解；
	     -->
	<context:component-scan base-package="cn.itcast"></context:component-scan>

	
	<!-- 导入外部的properties文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>


	<!-- 配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<!-- 指定hibernate的配置文件位置 -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<!-- 配置c3p0数据库连接池 -->
		<property name="dataSource">
			<bean class="com.mchange.v2.c3p0.ComboPooledDataSource">
				<!-- 数据连接信息 -->
				<property name="jdbcUrl" value="${jdbcUrl}"></property>
				<property name="driverClass" value="${driverClass}"></property>
				<property name="user" value="${user}"></property>
				<property name="password" value="${password}"></property>
				<!-- 其他配置 -->
				<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
				<property name="initialPoolSize" value="3"></property>
				<!--连接池中保留的最小连接数。Default: 3 -->
				<property name="minPoolSize" value="3"></property>
				<!--连接池中保留的最大连接数。Default: 15 -->
				<property name="maxPoolSize" value="5"></property>
				<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
				<property name="acquireIncrement" value="3"></property>
				<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
				<property name="maxStatements" value="8"></property>
				<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
				<property name="maxStatementsPerConnection" value="5"></property>
				<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
				<property name="maxIdleTime" value="1800"></property>
			</bean>
		</property>
	</bean>


	<!-- 配置声明式事务管理（采用注解的方式）
		HibernateTransactionManager通过将事务管理的职责委托给org.hibernate.Transaction对象，
		org.hibernate.Transaction对象从Hibernate Session中获取，然后由Transaction对象来提交、回滚事务。 -->
		
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<bean id="Demo_UserDaoImpl" class="cn.itcast.demo.daoImpl.Demo_UserDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="CustomerDAOImpl" class="cn.itcast.customer.daoImpl.CustomerDAOImpl" >
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- <bean id="BaseDaoImpl" class="cn.itcast.ssh.base.BaseDaoImpl" >
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> -->
	
	<!-- 导入其他bean配置文件 -->
	<!-- <import resource="demoBean.xml" /> -->
	<import resource="DataSource.xml"></import>
	<import resource="HibernateSessionFactory.xml"></import>

</beans>
